name: "Run Terraform via Terragrunt"
description: "This action runs terraform or terragrunt including install, setup and caches"

author: Datadrivers GmbH

branding:
  icon: "terminal"
  color: "blue"

inputs:
  terraform-version:
    description: "terraform version to setup. Use 'disabled' to skip. Leave empty string to let tenv auto-detect (from .terraform-version / .tool-versions)."
    required: false
    default: "disabled"
  terraform-plan-filename:
    description: "name for terraform plan files, which are used as input to generate plan json files as input for pr-commenter action"
    required: false
    default: "terraform.tfplan"
  enable-terraform-change-pr-commenter:
    description: "toggle to add pr comment for terraform-plan-filename files. Requires pre-generated terraform.tfplan file."
    required: false
    default: "false"
  include-plan-job-summary:
    description: "If true, add the results of the plan to the workflow job summary."
    required: false
    default: "true"
  pr-commenter-comment-header:
    description: "Header for the PR comment"
    required: false
    default: "Terraform Plan Changes"
  pr-commenter-comment-footer:
    description: "Footer for the PR comment"
    required: false
    default: ""
  tenv-version:
    description: "tenv version to setup."
    required: false
    default: "latest"
  terragrunt-version:
    description: "terragrunt version to setup. Use 'disabled' to skip. Leave empty string to let tenv auto-detect (from .terragrunt-version / .tool-versions)."
    required: false
    default: "disabled"
  terragrunt-working-directory:
    description: "working-directory for github step to run terragrunt/terraform command"
    required: false
    default: "."
  terragrunt-cache-extra-key:
    description: "string appended to terragrunt cache key "
    required: false
    default: ""
  commands:
    description: "terraform execution line. For multiple commands use | multi line syntax"
    required: true
  use-aws-auth:
    description: "Toggle to log in to aws"
    required: false
    default: "false"
  aws-region:
    description: "AWS Region for Login"
    required: false
    default: "eu-central-1"
  aws-role-to-assume:
    description: "AWS IAM Role for github action to access aws api"
    required: false
    default: ""
  aws-role-duration-seconds:
    description: "AWS session time"
    required: false
    default: "1800"
  use-gcloud-auth:
    description: "Toggle to log in via gcloud to aws"
    required: false
    default: "false"
  gcp-workload-identity-provider:
    description: |-
      The full identifier of the Workload Identity Provider, including the
      project number, pool name, and provider name. If provided, this must be
      the full identifier which includes all parts, for example:
      "projects/123456789/locations/global/workloadIdentityPools/my-pool/providers/my-provider".
      This is required if "use-gcloud-auth" is true.
    required: false
    default: ""
  gcp-service-account-email:
    description: |-
      Email address or unique identifier of the Google Cloud service account for
      which to generate credentials. This is required if
      "workload_identity_provider" is specified and "use-gcloud-auth" is true.
    required: false
    default: ""
  gcp-project-id:
    description: |-
      ID of the default project to use for future API calls and invocations. This is required if
      "use-gcloud-auth" is true.
    required: false
  terragrunt-download:
    description: "path to terragrunt cache dir storage"
    required: false
    default: "$HOME/.terragrunt-cache/"
  skip-caches:
    description: "Toggle to skip caches"
    required: false
    default: "false"
  enable-debug:
    description: "Add debug output to steps"
    required: false
    default: "false"
  github-token:
    description: "Github token to use for getting latest release"
    required: false
  use-automatic-binary-detection:
    description: "This action automatically detects which binary (terraform XOR terragrunt) to use. It does this by checking if terragrunt.hcl is present. If you set this to false terraform will be used"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Install tenv
      if: inputs.terraform-version != 'disabled' || inputs.terragrunt-version != 'disabled'
      shell: bash
      env:
        INPUT_TENV_VERSION: ${{ inputs.tenv-version }}
        INPUT_GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Determine version (supports 'latest' or explicit tag, with or without leading 'v')
        if [[ "${INPUT_TENV_VERSION}" == "latest" ]]; then
          echo "Resolving latest tenv release via GitHub API";
          auth_header=()
          if [[ -n "${INPUT_GITHUB_TOKEN}" ]]; then
            auth_header=( -H "Authorization: Bearer ${INPUT_GITHUB_TOKEN}" )
          fi
          # Fetch latest tag
          latest_json=$(curl -sSL "https://api.github.com/repos/tofuutils/tenv/releases/latest" "${auth_header[@]}")
          TENV_VERSION=$(printf '%s' "$latest_json" | grep -E '"tag_name"' | head -1 | sed -E 's/.*"tag_name" *: *"([^"]+)".*/\1/')
          [[ -z "${TENV_VERSION}" ]] && { echo "Failed to determine latest tenv version" >&2; exit 1; }
        else
          TENV_VERSION="${INPUT_TENV_VERSION}"
        fi
        # Detect architecture and map to DEB naming convention
        ARCH="$(uname -m)"
        case "$ARCH" in
          x86_64) ARCH_DEB="amd64" ;;
          aarch64 | arm64) ARCH_DEB="arm64" ;;
          *) echo "Unsupported architecture: $ARCH" >&2; exit 1 ;;
        esac
        DEB_FILE="tenv_${TENV_VERSION}_${ARCH_DEB}.deb"
        DOWNLOAD_URL="https://github.com/tofuutils/tenv/releases/download/${TENV_VERSION}/${DEB_FILE}"
        echo "Installing tenv ${TENV_VERSION} from ${DOWNLOAD_URL}";
        curl -fL -o "${DEB_FILE}" "${DOWNLOAD_URL}" || { echo "Download failed" >&2; exit 1; }
        if command -v sudo >/dev/null 2>&1; then
          sudo dpkg -i "${DEB_FILE}"
        else
          dpkg -i "${DEB_FILE}"
        fi
    - name: Install requested tools (terraform/terragrunt)
      if: inputs.terraform-version != 'disabled' || inputs.terragrunt-version != 'disabled'
      shell: bash
      working-directory: ${{ inputs.terragrunt-working-directory }}
      run: |
        tf_ver="${{ inputs.terraform-version }}"
        tg_ver="${{ inputs.terragrunt-version }}"

        # Terraform install logic
        if [[ "${tf_ver}" != "disabled" ]]; then
          if [[ -z "${tf_ver}" ]]; then
            export TENV_AUTO_INSTALL=true
            tenv tf install
          else
            tenv tf install "${tf_ver}"
          fi
        fi

        # Terragrunt install logic
        if [[ "${tg_ver}" != "disabled" ]]; then
          if [[ -z "${tg_ver}" ]]; then
            export TENV_AUTO_INSTALL=true
            tenv tg install
          else
            tenv tg install "${tg_ver}"
          fi
        fi
    - name: Config caches
      if: inputs.skip-caches == 'false'
      env:
        INPUT_TERRAGRUNT_DOWNLOAD: ${{ inputs.terragrunt-download }}
      shell: bash
      run: |
        TF_PLUGIN_CACHE_DIR="$HOME/.terraform.d/plugin-cache"
        echo "TF_PLUGIN_CACHE_DIR=$TF_PLUGIN_CACHE_DIR" >> $GITHUB_ENV
        mkdir --parents $TF_PLUGIN_CACHE_DIR
        TG_DOWNLOAD_DIR=${INPUT_TERRAGRUNT_DOWNLOAD//\$HOME/$HOME} # make sure $HOME is expanded
        echo "TG_DOWNLOAD_DIR=$TG_DOWNLOAD_DIR" >> $GITHUB_ENV
        mkdir --parents $TG_DOWNLOAD_DIR
        # clean up to make sure self-hosted runner dirs are clean
        shopt -s dotglob
        cd "${TG_DOWNLOAD_DIR:?}" && rm -rf *
    - name: Cache Terraform
      if: inputs.skip-caches == 'false'
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
        key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl','**/versions.tf') }}
        restore-keys: |
          ${{ runner.os }}-terraform-
    - name: Cache Terragrunt
      if: inputs.skip-caches == 'false'
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.TG_DOWNLOAD_DIR }}
        key: ${{ runner.os }}-${{ env.TG_DOWNLOAD_DIR }}-${{ hashFiles('**/terragrunt.hcl','**/.terraform.lock.hcl') }}${{ inputs.terragrunt-cache-extra-key }}
        restore-keys: |
          ${{ runner.os }}-${{ env.TG_DOWNLOAD_DIR }}-${{ hashFiles('**/terragrunt.hcl','**/.terraform.lock.hcl') }}
    - id: "gcloud-auth"
      if: inputs.use-gcloud-auth == 'true'
      name: "Authenticate to GCP"
      uses: "google-github-actions/auth@v3"
      with:
        project_id: ${{ inputs.gcp-project-id }}
        workload_identity_provider: ${{ inputs.gcp-workload-identity-provider }}
        service_account: ${{ inputs.gcp-service-account-email }}
    - id: "aws-auth"
      if: inputs.use-aws-auth == 'true'
      name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.aws-role-to-assume }}
        role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
    - name: Run Terraform
      shell: bash
      working-directory: ${{ inputs.terragrunt-working-directory }}
      run: ${{ inputs.commands }}
    - name: Convert terraform plan files to json
      if: inputs.enable-terraform-change-pr-commenter == 'true'
      env:
        INPUT_TERRAFORM_PLAN_FILENAME: ${{ inputs.terraform-plan-filename }}
        INPUT_USE_AUTOMATIC_BINARY_DETECTION: ${{ inputs.use-automatic-binary-detection }}
        INPUT_ENABLE_DEBUG: ${{ inputs.enable-debug }}
      shell: bash
      id: tf-planfiles
      run: |
        echo "::group::convert terraform plan files to json"
        [[ "$ACT" == "true" ]] && apt-get update && apt-get install parallel -y # on act runner parallel is missing
        set -e
        [[ "${INPUT_ENABLE_DEBUG}" == "true" ]] && set -x
        planfiles_json=()
        tf_convert_plan_to_json(){
          [[ "${INPUT_ENABLE_DEBUG}" == "true" ]] && set -x
          exec 3>&1
          exec 1>&2
          set -e
          local planfile=$1
          planfile_name=$(echo ${planfile##*/})
          planfile_path=$(dirname $planfile)
          terraform_bin="terraform"
          tfplan_json=$(readlink -f "${planfile_path}/tfplan.json")
          cd "${planfile_path}"
          [[ "${INPUT_USE_AUTOMATIC_BINARY_DETECTION}" == "true" ]] && test -s terragrunt.hcl && terraform_bin="terragrunt" || true
          $terraform_bin show -no-color -json "${planfile_name}" > "${tfplan_json}"
          echo ${tfplan_json} >&3
          cd - &>/dev/null
        };
        export -f tf_convert_plan_to_json
        mapfile -t planfiles_json < <( find . -type f -name ${INPUT_TERRAFORM_PLAN_FILENAME} | parallel 'tf_convert_plan_to_json {}' )
        content=$(printf "%s\n" "${planfiles_json[@]}")
        if [[ -n "${content}" ]]; then
          delimiter="$(openssl rand -hex 8)"
          echo "terraform_planfiles_json<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "${content}" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"
        fi
        echo "::endgroup::"
    - name: Add PR comment for terraform plan changes
      if: inputs.enable-terraform-change-pr-commenter == 'true' && endsWith( steps.tf-planfiles.outputs.terraform_planfiles_json , '.json' )
      uses: liatrio/terraform-change-pr-commenter@v1.14.0
      continue-on-error: true
      with:
        include-plan-job-summary: ${{ inputs.include-plan-job-summary }}
        comment-header: ${{ inputs.pr-commenter-comment-header }}
        comment-footer: ${{ inputs.pr-commenter-comment-footer }}
        hide-previous-comments: true
        log-changed-resources: false
        json-file: |
          ${{ steps.tf-planfiles.outputs.terraform_planfiles_json }}
